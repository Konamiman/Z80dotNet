Z80.NET Release Notes
---------------------

* v1.1.0

- Retarget to .NET standard 2.0

- Add interrupt and RETI/RETN related events

- Add support for 16 bit port numbers

See: https://github.com/Konamiman/Z80dotNet/issues?q=milestone%3Av1.1.0%20


* v1.0.6

- FIX: memory access events were not fired when reading the address of the code to execute
       when servicing an interrupt in IM2 mode.

- Z80ProcessorExtensions class removed, its methods are now part of (I)Z80Processor.

- Cleanup of some residual usages of Inc, Dec, Add, Sub from the NumberUtils class.


* v1.0.5

- FIX: ExecuteRet was causing IndexOutOfRangeException when invoked with SP=FFFFh.


* v1.0.4

- FIX: Conditional RET instructions were causing execution to terminate when
       AutoStopOnRetWithStackEmpty was set, even when the condition was not met.


* v1.0.3

- REFACTOR: There were some helper methods in place to deal with 8 and 16 bit numbers arithmetic
            taking care of overflows and short/ushort conversions. These are not used anymore, 
            since C# can handle all of this with the built-in arithmetic and casting operators. 
            They are still used in test code, though.


* v1.0.2

- FIX: Fixed the flags 3 and 5 calculation for the CP instructions.
       Now the Z80Processor class passes the ZEXALL test except for the BIT instruction.
	   
- NEW: Z80Processor.ClockSyncrhonizer can now be set to null in order to disable
       clock syncrhonization, so that the simulation runs at the maximum speed
	   provided by the host system.


* v1.0.1

- FIX: Invoking ExecutionStopper.Stop from the BerforeInstructionFetch event
       was throwing InstructionFetchFinishedEventNotFiredException.

- FIX: Flags calculation was wrong for ADD, ADC, SUB, SBC, CP, NEG and DAA instructions.
       With this fix the Z80Processor class passes the ZEXDOC test
       (https://github.com/KnightOS/z80e/blob/master/gpl/zexdoc.src).
