
// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change "ADD A,r +             .tt" instead.

using System;

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
        /// <summary>
        /// The ADC A,A instruction.
		/// </summary>
		private byte ADC_A_A()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.A;
			var newValueInt = oldValue + (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SBC A,A instruction.
		/// </summary>
		private byte SBC_A_A()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.A;
			var newValueInt = oldValue - (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADD A,A instruction.
		/// </summary>
		private byte ADD_A_A()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.A;
			var newValueInt = oldValue + (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SUB A instruction.
		/// </summary>
		private byte SUB_A()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.A;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The CP A instruction.
		/// </summary>
		private byte CP_A()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.A;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(valueToAdd);

            return 4;
        }

        /// <summary>
		/// The CPI instruction.
        /// </summary>
		private byte CPI()
        {
            FetchFinished();

            var oldValue = Registers.A;
			var valueToAdd = ProcessorAgent.ReadFromMemory((ushort)Registers.HL);
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
			var counter = Registers.BC;
            Registers.HL++;
			counter--;
			Registers.BC = counter;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
			Registers.PF = (Registers.BC != 0);
            Registers.NF = 1;
			var valueForFlags3And5 = (byte)(newValue - Registers.HF);
			Registers.Flag3 = valueForFlags3And5.GetBit(3);
			Registers.Flag5 = valueForFlags3And5.GetBit(1);

            return 16;
        }

        /// <summary>
		/// The CPD instruction.
        /// </summary>
		private byte CPD()
        {
            FetchFinished();

            var oldValue = Registers.A;
			var valueToAdd = ProcessorAgent.ReadFromMemory((ushort)Registers.HL);
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
			var counter = Registers.BC;
            Registers.HL--;
			counter--;
			Registers.BC = counter;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
			Registers.PF = (Registers.BC != 0);
            Registers.NF = 1;
			var valueForFlags3And5 = (byte)(newValue - Registers.HF);
			Registers.Flag3 = valueForFlags3And5.GetBit(3);
			Registers.Flag5 = valueForFlags3And5.GetBit(1);

            return 16;
        }

        /// <summary>
		/// The CPIR instruction.
        /// </summary>
		private byte CPIR()
        {
            FetchFinished();

            var oldValue = Registers.A;
			var valueToAdd = ProcessorAgent.ReadFromMemory((ushort)Registers.HL);
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
			var counter = Registers.BC;
            Registers.HL++;
			counter--;
			Registers.BC = counter;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
			Registers.PF = (Registers.BC != 0);
            Registers.NF = 1;
			var valueForFlags3And5 = (byte)(newValue - Registers.HF);
			Registers.Flag3 = valueForFlags3And5.GetBit(3);
			Registers.Flag5 = valueForFlags3And5.GetBit(1);

			if(counter != 0 && Registers.ZF == 0) {
				Registers.PC = (ushort)(Registers.PC - 2);
				return 21;
			}

            return 16;
        }

        /// <summary>
		/// The CPDR instruction.
        /// </summary>
		private byte CPDR()
        {
            FetchFinished();

            var oldValue = Registers.A;
			var valueToAdd = ProcessorAgent.ReadFromMemory((ushort)Registers.HL);
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
			var counter = Registers.BC;
            Registers.HL--;
			counter--;
			Registers.BC = counter;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
			Registers.PF = (Registers.BC != 0);
            Registers.NF = 1;
			var valueForFlags3And5 = (byte)(newValue - Registers.HF);
			Registers.Flag3 = valueForFlags3And5.GetBit(3);
			Registers.Flag5 = valueForFlags3And5.GetBit(1);

			if(counter != 0 && Registers.ZF == 0) {
				Registers.PC = (ushort)(Registers.PC - 2);
				return 21;
			}

            return 16;
        }

        /// <summary>
        /// The ADC A,B instruction.
		/// </summary>
		private byte ADC_A_B()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.B;
			var newValueInt = oldValue + (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SBC A,B instruction.
		/// </summary>
		private byte SBC_A_B()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.B;
			var newValueInt = oldValue - (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADD A,B instruction.
		/// </summary>
		private byte ADD_A_B()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.B;
			var newValueInt = oldValue + (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SUB B instruction.
		/// </summary>
		private byte SUB_B()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.B;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The CP B instruction.
		/// </summary>
		private byte CP_B()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.B;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(valueToAdd);

            return 4;
        }

        /// <summary>
        /// The ADC A,C instruction.
		/// </summary>
		private byte ADC_A_C()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.C;
			var newValueInt = oldValue + (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SBC A,C instruction.
		/// </summary>
		private byte SBC_A_C()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.C;
			var newValueInt = oldValue - (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADD A,C instruction.
		/// </summary>
		private byte ADD_A_C()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.C;
			var newValueInt = oldValue + (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SUB C instruction.
		/// </summary>
		private byte SUB_C()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.C;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The CP C instruction.
		/// </summary>
		private byte CP_C()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.C;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(valueToAdd);

            return 4;
        }

        /// <summary>
        /// The ADC A,D instruction.
		/// </summary>
		private byte ADC_A_D()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.D;
			var newValueInt = oldValue + (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SBC A,D instruction.
		/// </summary>
		private byte SBC_A_D()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.D;
			var newValueInt = oldValue - (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADD A,D instruction.
		/// </summary>
		private byte ADD_A_D()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.D;
			var newValueInt = oldValue + (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SUB D instruction.
		/// </summary>
		private byte SUB_D()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.D;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The CP D instruction.
		/// </summary>
		private byte CP_D()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.D;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(valueToAdd);

            return 4;
        }

        /// <summary>
        /// The ADC A,E instruction.
		/// </summary>
		private byte ADC_A_E()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.E;
			var newValueInt = oldValue + (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SBC A,E instruction.
		/// </summary>
		private byte SBC_A_E()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.E;
			var newValueInt = oldValue - (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADD A,E instruction.
		/// </summary>
		private byte ADD_A_E()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.E;
			var newValueInt = oldValue + (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SUB E instruction.
		/// </summary>
		private byte SUB_E()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.E;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The CP E instruction.
		/// </summary>
		private byte CP_E()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.E;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(valueToAdd);

            return 4;
        }

        /// <summary>
        /// The ADC A,H instruction.
		/// </summary>
		private byte ADC_A_H()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.H;
			var newValueInt = oldValue + (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SBC A,H instruction.
		/// </summary>
		private byte SBC_A_H()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.H;
			var newValueInt = oldValue - (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADD A,H instruction.
		/// </summary>
		private byte ADD_A_H()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.H;
			var newValueInt = oldValue + (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SUB H instruction.
		/// </summary>
		private byte SUB_H()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.H;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The CP H instruction.
		/// </summary>
		private byte CP_H()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.H;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(valueToAdd);

            return 4;
        }

        /// <summary>
        /// The ADC A,L instruction.
		/// </summary>
		private byte ADC_A_L()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.L;
			var newValueInt = oldValue + (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SBC A,L instruction.
		/// </summary>
		private byte SBC_A_L()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.L;
			var newValueInt = oldValue - (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The ADD A,L instruction.
		/// </summary>
		private byte ADD_A_L()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.L;
			var newValueInt = oldValue + (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The SUB L instruction.
		/// </summary>
		private byte SUB_L()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.L;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The CP L instruction.
		/// </summary>
		private byte CP_L()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.L;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(valueToAdd);

            return 4;
        }

        /// <summary>
        /// The ADC A,(HL) instruction.
		/// </summary>
		private byte ADC_A_aHL()
        {
            FetchFinished();

            var oldValue = Registers.A;
			var address = (ushort)Registers.HL;
				var valueToAdd = ProcessorAgent.ReadFromMemory(address);
			var newValueInt = oldValue + (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 7;
        }

        /// <summary>
        /// The SBC A,(HL) instruction.
		/// </summary>
		private byte SBC_A_aHL()
        {
            FetchFinished();

            var oldValue = Registers.A;
			var address = (ushort)Registers.HL;
				var valueToAdd = ProcessorAgent.ReadFromMemory(address);
			var newValueInt = oldValue - (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 7;
        }

        /// <summary>
        /// The ADD A,(HL) instruction.
		/// </summary>
		private byte ADD_A_aHL()
        {
            FetchFinished();

            var oldValue = Registers.A;
			var address = (ushort)Registers.HL;
				var valueToAdd = ProcessorAgent.ReadFromMemory(address);
			var newValueInt = oldValue + (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 7;
        }

        /// <summary>
        /// The SUB (HL) instruction.
		/// </summary>
		private byte SUB_aHL()
        {
            FetchFinished();

            var oldValue = Registers.A;
			var address = (ushort)Registers.HL;
				var valueToAdd = ProcessorAgent.ReadFromMemory(address);
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 7;
        }

        /// <summary>
        /// The CP (HL) instruction.
		/// </summary>
		private byte CP_aHL()
        {
            FetchFinished();

            var oldValue = Registers.A;
			var address = (ushort)Registers.HL;
				var valueToAdd = ProcessorAgent.ReadFromMemory(address);
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(valueToAdd);

            return 7;
        }

        /// <summary>
        /// The ADC A,n instruction.
		/// </summary>
		private byte ADC_A_n()
        {
			var valueToAdd = ProcessorAgent.FetchNextOpcode();
            FetchFinished();

            var oldValue = Registers.A;
			var newValueInt = oldValue + (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 7;
        }

        /// <summary>
        /// The SBC A,n instruction.
		/// </summary>
		private byte SBC_A_n()
        {
			var valueToAdd = ProcessorAgent.FetchNextOpcode();
            FetchFinished();

            var oldValue = Registers.A;
			var newValueInt = oldValue - (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 7;
        }

        /// <summary>
        /// The ADD A,n instruction.
		/// </summary>
		private byte ADD_A_n()
        {
			var valueToAdd = ProcessorAgent.FetchNextOpcode();
            FetchFinished();

            var oldValue = Registers.A;
			var newValueInt = oldValue + (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 7;
        }

        /// <summary>
        /// The SUB n instruction.
		/// </summary>
		private byte SUB_n()
        {
			var valueToAdd = ProcessorAgent.FetchNextOpcode();
            FetchFinished();

            var oldValue = Registers.A;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 7;
        }

        /// <summary>
        /// The CP n instruction.
		/// </summary>
		private byte CP_n()
        {
			var valueToAdd = ProcessorAgent.FetchNextOpcode();
            FetchFinished();

            var oldValue = Registers.A;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(valueToAdd);

            return 7;
        }

        /// <summary>
        /// The ADC A,IXH instruction.
		/// </summary>
		private byte ADC_A_IXH()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.IXH;
			var newValueInt = oldValue + (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The SBC A,IXH instruction.
		/// </summary>
		private byte SBC_A_IXH()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.IXH;
			var newValueInt = oldValue - (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The ADD A,IXH instruction.
		/// </summary>
		private byte ADD_A_IXH()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.IXH;
			var newValueInt = oldValue + (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The SUB IXH instruction.
		/// </summary>
		private byte SUB_IXH()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.IXH;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The CP IXH instruction.
		/// </summary>
		private byte CP_IXH()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.IXH;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(valueToAdd);

            return 8;
        }

        /// <summary>
        /// The ADC A,IXL instruction.
		/// </summary>
		private byte ADC_A_IXL()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.IXL;
			var newValueInt = oldValue + (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The SBC A,IXL instruction.
		/// </summary>
		private byte SBC_A_IXL()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.IXL;
			var newValueInt = oldValue - (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The ADD A,IXL instruction.
		/// </summary>
		private byte ADD_A_IXL()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.IXL;
			var newValueInt = oldValue + (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The SUB IXL instruction.
		/// </summary>
		private byte SUB_IXL()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.IXL;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The CP IXL instruction.
		/// </summary>
		private byte CP_IXL()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.IXL;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(valueToAdd);

            return 8;
        }

        /// <summary>
        /// The ADC A,IYH instruction.
		/// </summary>
		private byte ADC_A_IYH()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.IYH;
			var newValueInt = oldValue + (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The SBC A,IYH instruction.
		/// </summary>
		private byte SBC_A_IYH()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.IYH;
			var newValueInt = oldValue - (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The ADD A,IYH instruction.
		/// </summary>
		private byte ADD_A_IYH()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.IYH;
			var newValueInt = oldValue + (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The SUB IYH instruction.
		/// </summary>
		private byte SUB_IYH()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.IYH;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The CP IYH instruction.
		/// </summary>
		private byte CP_IYH()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.IYH;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(valueToAdd);

            return 8;
        }

        /// <summary>
        /// The ADC A,IYL instruction.
		/// </summary>
		private byte ADC_A_IYL()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.IYL;
			var newValueInt = oldValue + (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The SBC A,IYL instruction.
		/// </summary>
		private byte SBC_A_IYL()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.IYL;
			var newValueInt = oldValue - (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The ADD A,IYL instruction.
		/// </summary>
		private byte ADD_A_IYL()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.IYL;
			var newValueInt = oldValue + (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The SUB IYL instruction.
		/// </summary>
		private byte SUB_IYL()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.IYL;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The CP IYL instruction.
		/// </summary>
		private byte CP_IYL()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var valueToAdd = Registers.IYL;
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(valueToAdd);

            return 8;
        }

        /// <summary>
        /// The ADC A,(IX+n) instruction.
		/// </summary>
		private byte ADC_A_aIX_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
            FetchFinished();

            var oldValue = Registers.A;
			var address = (ushort)(Registers.IX + (SByte)offset);
				var valueToAdd = ProcessorAgent.ReadFromMemory(address);
			var newValueInt = oldValue + (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 19;
        }

        /// <summary>
        /// The SBC A,(IX+n) instruction.
		/// </summary>
		private byte SBC_A_aIX_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
            FetchFinished();

            var oldValue = Registers.A;
			var address = (ushort)(Registers.IX + (SByte)offset);
				var valueToAdd = ProcessorAgent.ReadFromMemory(address);
			var newValueInt = oldValue - (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 19;
        }

        /// <summary>
        /// The ADD A,(IX+n) instruction.
		/// </summary>
		private byte ADD_A_aIX_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
            FetchFinished();

            var oldValue = Registers.A;
			var address = (ushort)(Registers.IX + (SByte)offset);
				var valueToAdd = ProcessorAgent.ReadFromMemory(address);
			var newValueInt = oldValue + (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 19;
        }

        /// <summary>
        /// The SUB (IX+n) instruction.
		/// </summary>
		private byte SUB_aIX_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
            FetchFinished();

            var oldValue = Registers.A;
			var address = (ushort)(Registers.IX + (SByte)offset);
				var valueToAdd = ProcessorAgent.ReadFromMemory(address);
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 19;
        }

        /// <summary>
        /// The CP (IX+n) instruction.
		/// </summary>
		private byte CP_aIX_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
            FetchFinished();

            var oldValue = Registers.A;
			var address = (ushort)(Registers.IX + (SByte)offset);
				var valueToAdd = ProcessorAgent.ReadFromMemory(address);
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(valueToAdd);

            return 19;
        }

        /// <summary>
        /// The ADC A,(IY+n) instruction.
		/// </summary>
		private byte ADC_A_aIY_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
            FetchFinished();

            var oldValue = Registers.A;
			var address = (ushort)(Registers.IY + (SByte)offset);
				var valueToAdd = ProcessorAgent.ReadFromMemory(address);
			var newValueInt = oldValue + (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 19;
        }

        /// <summary>
        /// The SBC A,(IY+n) instruction.
		/// </summary>
		private byte SBC_A_aIY_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
            FetchFinished();

            var oldValue = Registers.A;
			var address = (ushort)(Registers.IY + (SByte)offset);
				var valueToAdd = ProcessorAgent.ReadFromMemory(address);
			var newValueInt = oldValue - (valueToAdd + Registers.CF);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 19;
        }

        /// <summary>
        /// The ADD A,(IY+n) instruction.
		/// </summary>
		private byte ADD_A_aIY_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
            FetchFinished();

            var oldValue = Registers.A;
			var address = (ushort)(Registers.IY + (SByte)offset);
				var valueToAdd = ProcessorAgent.ReadFromMemory(address);
			var newValueInt = oldValue + (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd ^ 0x80) & (valueToAdd ^ newValue) & 0x80;
            Registers.NF = 0;
			SetFlags3and5From(newValue);

            return 19;
        }

        /// <summary>
        /// The SUB (IY+n) instruction.
		/// </summary>
		private byte SUB_aIY_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
            FetchFinished();

            var oldValue = Registers.A;
			var address = (ushort)(Registers.IY + (SByte)offset);
				var valueToAdd = ProcessorAgent.ReadFromMemory(address);
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);
            Registers.A = newValue;

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(newValue);

            return 19;
        }

        /// <summary>
        /// The CP (IY+n) instruction.
		/// </summary>
		private byte CP_aIY_plus_n()
        {
			var offset = ProcessorAgent.FetchNextOpcode();
            FetchFinished();

            var oldValue = Registers.A;
			var address = (ushort)(Registers.IY + (SByte)offset);
				var valueToAdd = ProcessorAgent.ReadFromMemory(address);
			var newValueInt = oldValue - (valueToAdd);
			var newValue = (byte)(newValueInt & 0xFF);

            Registers.SF = newValue & 0x80;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x10;
            Registers.CF = (newValueInt & 0x100);
			Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x80;
            Registers.NF = 1;
			SetFlags3and5From(valueToAdd);

            return 19;
        }

    }
}