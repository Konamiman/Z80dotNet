<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="_Utils.t4"#>
<#@ output extension=".cs" #>
<#AutoGeneratedCodeWarning();#>

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
<# var instructions = new[] {"INI", "IND", "INIR", "INDR", "OUTI", "OUTD", "OTIR", "OTDR"};
   for(int i=0; i<instructions.Length; i++) { 
		var instr = instructions[i];
        var isInc = (instr.EndsWith("I") || instr.EndsWith("IR"));
        var isRepeat = (instr.EndsWith("R"));
        var isOut = (instr.StartsWith("O")); #>
        /// <summary>
        /// The <#=instr#> instruction.
        /// </summary>
        byte <#=instr#>()
        {
            FetchFinished();

            var portNumber = Registers.C;
            var address = Registers.HL;
<# if (isOut) { #>
            var value = ProcessorAgent.ReadFromMemory((ushort)address);
            ProcessorAgentExtendedPorts.WriteToPort(portNumber, Registers.B, value);
<# } else { #>
            var value = ProcessorAgentExtendedPorts.ReadFromPort(portNumber, Registers.B);
            ProcessorAgent.WriteToMemory((ushort)address, value);
<# } #>

            Registers.HL<#=isInc ? "++" : "--" #>;
            var counter = Registers.B;
            counter = (byte)(counter - 1);
            Registers.B = counter;
            Registers.ZF = (counter == 0);
            Registers.NF = 1;
            Registers.SF = counter.GetBit(7);
            SetFlags3and5From(counter);

<# if(isRepeat) { #>
			if(counter != 0) {
				Registers.PC = (ushort)(Registers.PC - 2);
				return 21;
			}
<# } #>

            return 16;
        }

<# } #>
    }
}
